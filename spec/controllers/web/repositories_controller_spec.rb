# frozen_string_literal: true

require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

describe Web::RepositoriesController do
  let(:gh_repositories) do
    YAML.load(Rails.root.join('spec/fixtures/files/github/repositories.yml').read)
  end

  let(:stub_repositories) do
    stub_request(:get, 'https://api.github.com/user/repos')
      .to_return(status: 200, body: gh_repositories, headers: {})
  end

  let(:stub_repository) do
    stub_request(:get, "https://api.github.com/repositories/#{gh_attributes['id']}")
      .to_return(
        status: 200, body: gh_attributes.to_json,
        headers: { 'Content-Type' => ['application/json', 'charset=UTF-8'] }
      )
  end

  # This should return the minimal set of attributes required to create a valid
  # Repository. As you add validations to Repository, be sure to
  # adjust the attributes here as well.
  let(:gh_valid_attributes) do
    repository_attributes = attributes_for(:repository, user: User.first)
    {
      'id' => repository_attributes[:original_id],
      'name' => repository_attributes[:name],
      'language' => repository_attributes[:language]
    }
  end

  let(:gh_invalid_attributes) do
    repository_attributes = attributes_for(:repository, user: User.first)
    {
      'id' => repository_attributes[:original_id],
      'name' => repository_attributes[:name],
      'language' => 'invalid_language'
    }
  end

  describe 'GET /index' do
    it 'renders a successful response' do
      get :index
      expect(response).to be_successful
    end
  end

  describe 'GET /show' do
    it 'renders a successful response' do
      get :show, params: { id: repositories(:repo_one) }
      expect(response).to be_successful
    end
  end

  describe 'GET /new' do
    it 'renders a successful response' do
      stub_repositories

      get :new
      expect(response).to be_successful
    end
  end

  describe 'POST /create' do
    context 'with valid parameters' do
      let(:gh_attributes) { gh_valid_attributes }

      it 'creates a new Repository' do
        stub_repositories
        stub_repository

        expect do
          post :create, params: { repository: { original_id: gh_attributes['id'] } }
        end.to change(Repository, :count).by(1)
        expect(response).to redirect_to(repositories_path)
      end
    end

    context 'with invalid parameters' do
      let(:gh_attributes) { gh_invalid_attributes }

      it 'does not create a new Repository' do
        stub_repositories
        stub_repository

        expect do
          post :create, params: { repository: { original_id: gh_attributes['id'] } }
        end.not_to change(Repository, :count)
        expect(response).to have_http_status(:unprocessable_entity)
      end
    end
  end

  describe 'DELETE /destroy' do
    it 'destroys the requested repository' do
      expect do
        delete :destroy, params: { id: repositories(:repo_one) }
      end.to change(Repository, :count).by(-1)
      expect(response).to redirect_to(repositories_path)
    end
  end
end
